package simpledb.planner;

import simpledb.materialize.MergeJoinPlan;
import simpledb.parse.QueryData;
import simpledb.query.Plan;
import simpledb.query.ProjectPlan;
import simpledb.query.SelectPlan;
import simpledb.query.TablePlan;
import simpledb.server.SimpleDB;
import simpledb.tx.Transaction;

import java.util.ArrayList;
import java.util.List;

/**
 * Implemententation of a custom query planner to exploit the modified sort-merge-join
 * plan as part of Project 2 Task 4.
 * Created by Nate Miller & Doug Lally on 5/4/2014.
 */
public class ExploitSortQueryPlanner implements QueryPlanner {

    /**
     * Construct the query plan for the given query and calling transaction.
     * @param data the parsed representation of the query
     * @param tx the calling transaction
     * @return the constructed plan
     */
    public Plan createPlan(QueryData data, Transaction tx) {
        List<Plan> plans = new ArrayList<Plan>();

        // Create a table plan for each table in the query to begin
        for (String tblname : data.tables()) {
            String viewdef = SimpleDB.mdMgr().getViewDef(tblname, tx);
            if (viewdef != null)
                plans.add(SimpleDB.planner().createQueryPlan(viewdef, tx));
            else
                plans.add(new TablePlan(tblname, tx));
        }

        // Create a merge join plan based on the table plans constructed before
        Plan p = plans.remove(0);
        for(int i = 0; i < plans.size(); i++){
            p = new MergeJoinPlan(p, plans.get(i), "a1", "a1", tx);
        }

        System.out.println("BLOCKS ACCESSED: " + p.blocksAccessed());
        return p;
    }
}
